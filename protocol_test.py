#! /usr/bin/python
# by pts@fazekas.hu at Sun Oct 21 09:16:49 CEST 2018
#
# * telnet doesn't send anything, and when the user types, it sends lines
#   terminated by '\r\n'.
# * nc (netcat) doesn't send anything, and when the user types, it sends lines
#   terminated by '\n'.
# * OpenSSH ssh(1) sends: 'SSH-2.0-OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.10\r\n'
# * Dropbear 2013.60 dbclient(1) sends "SSH-2.0-dropbear_2013.60\r\n\x00\x00\x02\x1c\x06\x14-\xbd\xf2BEi\t\xf0Q\xe7\xd9>\x81n\xfd\x15\x00\x00\x00Pdiffie-hellman-group1-sha1,diffie-hellman-group14-sha1,kexguess2@matt.ucc.asn.au\x00\x00\x00\x0fssh-rsa,ssh-dss\x00\x00\x00gaes128-ctr,3des-ctr,aes256-ctr,aes128-cbc,3des-cbc,aes256-cbc,twofish256-cbc,twofish-cbc,twofish128-cbc\x00\x00\x00gaes128-ctr,3des-ctr,aes256-ctr,aes128-cbc,3des-cbc,aes256-cbc,twofish256-cbc,twofish-cbc,twofish128-cbc\x00\x00\x00;hmac-sha2-256,hmac-sha2-512,hmac-sha1-96,hmac-sha1,hmac-md5\x00\x00\x00;hmac-sha2-256,hmac-sha2-512,hmac-sha1-96,hmac-sha1,hmac-md5\x00\x00\x00\x1azlib,zlib@openssh.com,none\x00\x00\x00\x1azlib,zlib@openssh.com,none\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\xd1\x12?\x8e\x9e\x84\x00\x00\x00\x8c\x06\x1e\x00\x00\x00\x80\x06\xee\x07\x05\x82X\xde\x07\xff\x88\xb9\xe0\xb2\xfaq\xe8\x07u\xadk9\xf1\xe3-\x18\xc6g\x8e\x16\xfe\x89\xcc\x8c\xa1\xa8\x8e\xdc^\x8dX\x19\xa7r@ V\xc5\xcc\xe6\xdbf\xd9\xc8\x8d\x11*\xcd\xaf\x84|\xef\x8c\xc8\x9b\x0fw\x0b\x81\xa0h\x8ev\xea\xb1\xfd\xef\x9dD\xd7\x8c\x07\xde\x05\x81\x7f\xee\xbe\xf4\x16Wz@Z\xde\xd4\x18\x16\xcd\x98\x92E\x94\x95\x91\t\xcc\xec\tR\xa6\x8c\xa9\x8d\x10\x84'WF#\xad\xb5\x8aHO,\xc0\xca}p\x95\xc3U\xa6\xe2".
# * Firefox 62 http:// sends (many times retrying): 'GET / HTTP/1.1\r\nHost: 127.0.0.1:55555\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nUpgrade-Insecure-Requests: 1\r\n\r\n'
# * Firefox 62 https:// sends (retrying):
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03\xbb4\'\xc8\x1aTP'
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03\x91r\x0ez/\x91_.'
# * Chrome 66 http:// sends (many times retrying): 'GET / HTTP/1.1\r\nHost: 127.0.0.1:55555\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: en-US,en;q=0.9,hu;q=0.8\r\n\r\n'
# * Chrome 66 https:// sends (retrying):
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03\x0cr\x08\xae'
#   '\x16\x03\x01\x00\xae\x01\x00\x00\xaa\x03\x03\x8f\xd1\xb4\x02'
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03:\x85\x81\xa7\x16'
#   '\x16\x03\x01\x00\xae\x01\x00\x00\xaa\x03\x03}\xdf3\xeb\xab\xd8'
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03rl\xea\xcc[\xd8\x9c'
#   '\x16\x03\x01\x00\xae\x01\x00\x00\xaa\x03\x03O\xc7\x02B5\xdf
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x034(b\x1a\x13qS\x0ew'
#   '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03Q9\x84\\r\x00\x83x'
#   '\x16\x03\x01\x00\xae\x01\x00\x00\xaa\x03\x03\x14\x9b\xa1\xf0'
# * Python 2.6 ssl.PROTOCOL_SSLv2:  ssl.SSLError  (not supported by OpenSSL libssl-1.0.1f)
# * Python 2.6 ssl.PROTOCOL_SSLv3:  '\x16\x03\x00\x00{\x01\x00\x00w\x03\x00\x1d\xcc\xa3\x93.s\x98@\xe8e\xda\x90\xe9\x82\x8aO\x0b\xd8\xe59H\x8b\x80gHo\xe4HT\xd4d\xcb\x00\x00P\xc0\x14\xc0\n\x009\x008\x00\x88\x00\x87\xc0\x0f\xc0\x05\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0\x13\xc0\t\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc0\x0e\xc0\x04\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00'
# * Python 2.6 ssl.PROTOCOL_SSLv23: '\x16\x03\x01\x01"\x01\x00\x01\x1e\x03\x03!\xc6Bl9\x96oU|\xba\xf9\x16\x08\x8b\xe9C\xee\x87\x00\xcd\xaey\xb7\x18\xcb\xf4\x9d-\x9a\xe2-\xc8\x00\x00\x88\xc00\xc0,\xc0(\xc0$\xc0\x14\xc0\n\x00\xa3\x00\x9f\x00k\x00j\x009\x008\x00\x88\x00\x87\xc02\xc0.\xc0*\xc0&\xc0\x0f\xc0\x05\x00\x9d\x00=\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0/\xc0+\xc0\'\xc0#\xc0\x13\xc0\t\x00\xa2\x00\x9e\x00g\x00@\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc01\xc0-\xc0)\xc0%\xc0\x0e\xc0\x04\x00\x9c\x00<\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00\x00m\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x004\x002\x00\x0e\x00\r\x00\x19\x00\x0b\x00\x0c\x00\x18\x00\t\x00\n\x00\x16\x00\x17\x00\x08\x00\x06\x00\x07\x00\x14\x00\x15\x00\x04\x00\x05\x00\x12\x00\x13\x00\x01\x00\x02\x00\x03\x00\x0f\x00\x10\x00\x11\x00#\x00\x00\x00\r\x00 \x00\x1e\x06\x01\x06\x02\x06\x03\x05\x01\x05\x02\x05\x03\x04\x01\x04\x02\x04\x03\x03\x01\x03\x02\x03\x03\x02\x01\x02\x02\x02\x03\x00\x0f\x00\x01\x01'
# * Python 2.6 ssl.PROTOCOL_TLSv1:  '\x16\x03\x01\x00\xc6\x01\x00\x00\xc2\x03\x01*\xa5\x05P\x94\x92{\xf1\xc3\xfd.\xda\xec\xd8)\x0c\xa9\xa5:0\x96}\xe0Jfy-\x98\x0c\xe7\t\x89\x00\x00P\xc0\x14\xc0\n\x009\x008\x00\x88\x00\x87\xc0\x0f\xc0\x05\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0\x13\xc0\t\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc0\x0e\xc0\x04\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00\x00I\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x004\x002\x00\x0e\x00\r\x00\x19\x00\x0b\x00\x0c\x00\x18\x00\t\x00\n\x00\x16\x00\x17\x00\x08\x00\x06\x00\x07\x00\x14\x00\x15\x00\x04\x00\x05\x00\x12\x00\x13\x00\x01\x00\x02\x00\x03\x00\x0f\x00\x10\x00\x11\x00#\x00\x00\x00\x0f\x00\x01\x01'
# * Python 2.6 on Ubuntu 10.04 uses OpenSSL libssl-0.9.8k.
# * Python 2.6 on Ubuntu 10.04 ssl.PROTOCOL_SSLv2:  '\x80+\x01\x00\x02\x00\x12\x00\x00\x00\x10\x07\x00\xc0\x03\x00\x80\x01\x00\x80\x06\x00@\x04\x00\x80\x02\x00\x80`\xb5\xcfv\xf7\x8al\xdedG\xd8\xf2\x8d\xaf\xa4/'
# * Python 2.6 on Ubuntu 10.04 ssl.PROTOCOL_SSLv3:  '\x16\x03\x00\x00T\x01\x00\x00P\x03\x00[\xcc<\xe5\x9b\xfc?\x06~15\xc3\x88\xf0\xa1Q\xe1\xfb\xae}\x19\xccJ\xb4~y\xef\xf4q\x89\tt\x00\x00(\x009\x008\x005\x00\x16\x00\x13\x00\n\x003\x002\x00/\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\x14\x00\x11\x00\x08\x00\x06\x00\x03\x00\xff\x02\x01\x00'
# * Python 2.6 on Ubuntu 10.04 ssl.PROTOCOL_SSLv23: '\x80g\x01\x03\x01\x00N\x00\x00\x00\x10\x00\x009\x00\x008\x00\x005\x00\x00\x16\x00\x00\x13\x00\x00\n\x07\x00\xc0\x00\x003\x00\x002\x00\x00/\x03\x00\x80\x00\x00\x05\x00\x00\x04\x01\x00\x80\x00\x00\x15\x00\x00\x12\x00\x00\t\x06\x00@\x00\x00\x14\x00\x00\x11\x00\x00\x08\x00\x00\x06\x04\x00\x80\x00\x00\x03\x02\x00\x80\x00\x00\xff\xaa+\x0b\x10\x95?y\x82\xef\xd0f\xaf\xc1\xe0\xa2<'
# * Python 2.6 on Ubuntu 10.04 ssl.PROTOCOL_TLSv1:  '\x16\x03\x01\x00Z\x01\x00\x00V\x03\x01[\xcc<\xe5\xbf\x11\x13\xd7\xc7\x86\x11a\xb0!\xc7N\xb5\xa3\x8e\x9cq\x04\x19\x82\x17U\x02\x02\xe2b\xc9\xb6\x00\x00(\x009\x008\x005\x00\x16\x00\x13\x00\n\x003\x002\x00/\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\x14\x00\x11\x00\x08\x00\x06\x00\x03\x00\xff\x02\x01\x00\x00\x04\x00#\x00\x00'
# * smbclient 4.3.11 (with or without -L) sends: '\x00\x00\x00\xbe\xffSMBr\x00\x00\x00\x00\x18C\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\x00\x00\x00\x00\x00\x9b\x00\x02PC NETWORK PROGRAM 1.0\x00\x02MICROSOFT NETWORKS 1.03\x00\x02MICROSOFT NETWORKS 3.0\x00\x02LANMAN1.0\x00\x02LM1.2X002\x00\x02DOS LANMAN2.1\x00\x02LANMAN2.1\x00\x02Samba\x00\x02NT LANMAN 1.0\x00\x02NT LM 0.12\x00'
# * `smbclient -m SMB2' and `smbclient -m SMB3' 4.3.11 sends: '\x00\x00\x00\xd4\xffSMBr\x00\x00\x00\x00\x18C\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\x00\x00\x00\x00\x00\xb1\x00\x02PC NETWORK PROGRAM 1.0\x00\x02MICROSOFT NETWORKS 1.03\x00\x02MICROSOFT NETWORKS 3.0\x00\x02LANMAN1.0\x00\x02LM1.2X002\x00\x02DOS LANMAN2.1\x00\x02LANMAN2.1\x00\x02Samba\x00\x02NT LANMAN 1.0\x00\x02NT LM 0.12\x00\x02SMB 2.002\x00\x02SMB 2.???\x00'
# * !! Bittorrent.
# * !! Encrypted bittorrent.
#
# SSL 2.0:
#
# * Good, byte-level description: https://www-archive.mozilla.org/projects/security/pki/nss/ssl/draft02.html
# * https://idea.popcount.org/2012-06-16-dissecting-ssl-handshake/
# * SSL 2.0 was originally developed by Netscape. It's old, barely documented and insecure.
# * SSL 2.0 is disabled by default, beginning with Internet Explorer 7,[212] Mozilla Firefox 2,[213] Opera 9.5,[214] and Safari.
# * SSL 2.0 is flawed (insecure) in a variety of ways.
# * https://tools.ietf.org/html/draft-hickman-netscape-ssl-00  (doesn't say whet msg-client-hello is)
# * Firefox 2 ships with SSL 2.0 support disabled by default, in favor of SSL 3.0. See the article Security in Firefox 2 for details. In addition, SSL 2.0 support is entirely removed in Firefox 8.
# * Example record the client sends first:
#   * \x80         MSB and extra bit length of SSL record data.
#   * [\x10-\xff]  LSB of SSL record data. Typical value: 43 or 103.
#   * \x01         MSG-CLIENT-HELLO SSL_MT_CLIENT_HELLO
#   * [\x00\x03]   CLIENT-VERSION-MSB SSL_CLIENT_VERSION With the next byte: '\x00\x02' or '\x03\x01'.
#   * [\x02\x01]   CLIENT-VERSION-LSB SSL_CLIENT_VERSION
#   * \x00         CIPHER-SPECS-LENGTH-MSB
#   * [\x03\x06\x09...\xff]  CIPHER-SPECS-LENGTH-LSB  Positive, divisible by 3. Typical value: 18 or 78.
#   * \x00         SESSION-ID-LENGTH-MSB
#   * [\x00\x10]   SESSION-ID-LENGTH-LSB. Typical value: 0.
#   * \x00         CHALLENGE-LENGTH-MSB
#   * [\x01-\xff]  CHALLENGE-LENGTH-LSB. Typical value: 16
#
# SSL3.0 and TLS:
#
# * Documentation: https://tls.ulfheim.net/
#
# SSL version constants:
#
# VersionSSL30 = 0x0300
# VersionTLS10 = 0x0301
# VersionTLS11 = 0x0302
# VersionTLS12 = 0x0303
# VersionTLS13 = 0x0304
#
# Samba:
#
# * https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-SMB/[MS-SMB].pdf
# * https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-CIFS/[MS-CIFS].pdf
# * This is direct hosting (section 2.1 Transport of MS-SMB) over TCP (port 445), not NetBIOS (NBT, TCP port 139, Session service for connection-oriented communication, RFC 1001 and 1002).
# * Packet 1:
#   * '\x00': Start of SMB over TCP message.
#   * '\x00\x00\xbe': Stream Protocol Length (MSBFirst). (Size of message, until END.)
#   * '\xffSMB': Protocol.
#   * 'r': Command: 0x72, SMB_COM_NEGOTIATE.
#   * '\x00\x00\x00\x00': Status of type SMB_ERROR.
#   * '\x18': Flags.
#   * 'C\xc8': Flags2.
#   * '\x00\x00': PIDHigh.
#   * '\x00\x00\x00\x00\x00\x00\x00\x00': SecurityFeatures.
#   * '\x00\x00': Reserved. Always 0.
#   * '\x00\x00': TID. Ignored.
#   * '\xfe\xff': PIDLow.
#   * '\x00\x00': UID. Ignored.
#   * '\x00\x00': MID.
#   * '\x00': WordCount, always 0.
#   * '\x9b\x00': ByteCount (LSBFirst). Size of remaining data (until END), must be at least 2.
#   * '\x02': BufferFormat, always 2 (indicates NUL-terminated).
#   * 'PC NETWORK PROGRAM 1.0\x00': DialectString (NUL-terminated).
#   * '\x02': BufferFormat, always 2 (indicates NUL-terminated).
#   *  MICROSOFT NETWORKS 1.03\x00': DialectString (NUL-terminated).
#   * ... '\x02MICROSOFT NETWORKS 3.0\x00\x02LANMAN1.0\x00\x02LM1.2X002\x00\x02DOS LANMAN2.1\x00\x02LANMAN2.1\x00\x02Samba\x00\x02NT LANMAN 1.0\x00\x02NT LM 0.12\x00'
#   * END.
#

import struct

def analyze_smb_negotiate(data):
  """Based on [MS-CIFS] and [MS-SMB]. This is on port 445."""
  import struct
  assert data[0 : 2] == '\x00\x00'
  assert data[4 : 8] == '\xffSMB'
  assert data[8] == 'r'  # SMB_COM_NEGOTIATE == 0x72.
  assert data[9 : 13] == '\0\0\0\0'  # SMB_ERROR.
  size1, = struct.unpack('>H', data[2 : 4])
  size2, = struct.unpack('<H', data[37 : 39])
  assert size2 >= 2
  assert size1 - size2 == 35
  assert data[39] == '\x02'
  print [data[39 : 39 + size2]]


def analyze_tls_hello(data):
  """Based on: https://tls.ulfheim.net/ ."""
  import struct
  i = 0
  assert data[0] == '\x16'  # Start of TLS handshake record.
  assert data[1] == '\x03'  # Protocol version MSB.
  assert data[2] in '\x00\x01\x02\x03\x04\x05\x06\x07'  # Protocol version LSB. \x07 would be TLS 1.6.
  record_payload_size, = struct.unpack('>H', data[3 : 5])  # We had up to 290 bytes, or 512 bytes.
  assert record_payload_size >= 47  # message_type(1), payload_size(3), client_version(2), client_random(32), session_id(1), cipher_suites(4), compression_methods(2), extensions(2).
  assert data[5] == '\x01'  # Message type: client hello.
  payload_size, = struct.unpack('>L', '\0' + data[6 : 9])
  assert payload_size == record_payload_size - 4
  assert data[9] == '\x03'  # Client version MSB.
  assert data[10] in '\x00\x01\x02\x03\x04\x05\x06\x07'  # Client version LSB. \x07 would be TLS 1.6.
  # data[11 : 43] contains client_random.
  if len(data) > 43:
    i = 43
    session_id_size = ord(data[i])
    i += 1 + session_id_size
    assert session_id_size == 0  # Empty session_id. (Is it always empty for HTTPS?)
    cipher_suites_size, = struct.unpack('>H', data[i : i + 2])
    assert cipher_suites_size > 0 and (cipher_suites_size & 1) == 0
    i += 2 + cipher_suites_size
    compression_methods_size = ord(data[i])
    assert 1 <= compression_methods_size <= 63  # Typically 1 or 2.
    i += 1 + compression_methods_size
    if i + 2 <= len(data):
      extensions_size, = struct.unpack('>H', data[i : i + 2])
      i += 2 + extensions_size
      assert i == 9 + payload_size  # End of record.
    else:
      extensions_size = None
  else:
    session_id_size = cipher_suites_size = compression_methods_size = extensions_size = None
  print [record_payload_size, session_id_size, cipher_suites_size, compression_methods_size, extensions_size]


TLS_CLIENT_DATAS = (
    '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03\xbb4\'\xc8\x1aTP',
    '\x16\x03\x01\x02\x00\x01\x00\x01\xfc\x03\x03\x91r\x0ez/\x91_.',
    '\x16\x03\x01\x00\xae\x01\x00\x00\xaa\x03\x03\x14\x9b\xa1\xf0',
    '\x16\x03\x00\x00{\x01\x00\x00w\x03\x00\x1d\xcc\xa3\x93.s\x98@\xe8e\xda\x90\xe9\x82\x8aO\x0b\xd8\xe59H\x8b\x80gHo\xe4HT\xd4d\xcb\x00\x00P\xc0\x14\xc0\n\x009\x008\x00\x88\x00\x87\xc0\x0f\xc0\x05\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0\x13\xc0\t\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc0\x0e\xc0\x04\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00',
    '\x16\x03\x01\x01"\x01\x00\x01\x1e\x03\x03!\xc6Bl9\x96oU|\xba\xf9\x16\x08\x8b\xe9C\xee\x87\x00\xcd\xaey\xb7\x18\xcb\xf4\x9d-\x9a\xe2-\xc8\x00\x00\x88\xc00\xc0,\xc0(\xc0$\xc0\x14\xc0\n\x00\xa3\x00\x9f\x00k\x00j\x009\x008\x00\x88\x00\x87\xc02\xc0.\xc0*\xc0&\xc0\x0f\xc0\x05\x00\x9d\x00=\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0/\xc0+\xc0\'\xc0#\xc0\x13\xc0\t\x00\xa2\x00\x9e\x00g\x00@\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc01\xc0-\xc0)\xc0%\xc0\x0e\xc0\x04\x00\x9c\x00<\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00\x00m\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x004\x002\x00\x0e\x00\r\x00\x19\x00\x0b\x00\x0c\x00\x18\x00\t\x00\n\x00\x16\x00\x17\x00\x08\x00\x06\x00\x07\x00\x14\x00\x15\x00\x04\x00\x05\x00\x12\x00\x13\x00\x01\x00\x02\x00\x03\x00\x0f\x00\x10\x00\x11\x00#\x00\x00\x00\r\x00 \x00\x1e\x06\x01\x06\x02\x06\x03\x05\x01\x05\x02\x05\x03\x04\x01\x04\x02\x04\x03\x03\x01\x03\x02\x03\x03\x02\x01\x02\x02\x02\x03\x00\x0f\x00\x01\x01',
    '\x16\x03\x01\x00\xc6\x01\x00\x00\xc2\x03\x01*\xa5\x05P\x94\x92{\xf1\xc3\xfd.\xda\xec\xd8)\x0c\xa9\xa5:0\x96}\xe0Jfy-\x98\x0c\xe7\t\x89\x00\x00P\xc0\x14\xc0\n\x009\x008\x00\x88\x00\x87\xc0\x0f\xc0\x05\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0\x13\xc0\t\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc0\x0e\xc0\x04\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00\x00I\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x004\x002\x00\x0e\x00\r\x00\x19\x00\x0b\x00\x0c\x00\x18\x00\t\x00\n\x00\x16\x00\x17\x00\x08\x00\x06\x00\x07\x00\x14\x00\x15\x00\x04\x00\x05\x00\x12\x00\x13\x00\x01\x00\x02\x00\x03\x00\x0f\x00\x10\x00\x11\x00#\x00\x00\x00\x0f\x00\x01\x01',
    '\x16\x03\x00\x00T\x01\x00\x00P\x03\x00[\xcc<\xe5\x9b\xfc?\x06~15\xc3\x88\xf0\xa1Q\xe1\xfb\xae}\x19\xccJ\xb4~y\xef\xf4q\x89\tt\x00\x00(\x009\x008\x005\x00\x16\x00\x13\x00\n\x003\x002\x00/\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\x14\x00\x11\x00\x08\x00\x06\x00\x03\x00\xff\x02\x01\x00',
    '\x16\x03\x01\x00Z\x01\x00\x00V\x03\x01[\xcc<\xe5\xbf\x11\x13\xd7\xc7\x86\x11a\xb0!\xc7N\xb5\xa3\x8e\x9cq\x04\x19\x82\x17U\x02\x02\xe2b\xc9\xb6\x00\x00(\x009\x008\x005\x00\x16\x00\x13\x00\n\x003\x002\x00/\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\x14\x00\x11\x00\x08\x00\x06\x00\x03\x00\xff\x02\x01\x00\x00\x04\x00#\x00\x00',
)
SMB_CLIENT_DATAS = (
    '\x00\x00\x00\xbe\xffSMBr\x00\x00\x00\x00\x18C\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\x00\x00\x00\x00\x00\x9b\x00\x02PC NETWORK PROGRAM 1.0\x00\x02MICROSOFT NETWORKS 1.03\x00\x02MICROSOFT NETWORKS 3.0\x00\x02LANMAN1.0\x00\x02LM1.2X002\x00\x02DOS LANMAN2.1\x00\x02LANMAN2.1\x00\x02Samba\x00\x02NT LANMAN 1.0\x00\x02NT LM 0.12\x00',
    '\x00\x00\x00\xd4\xffSMBr\x00\x00\x00\x00\x18C\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\x00\x00\x00\x00\x00\xb1\x00\x02PC NETWORK PROGRAM 1.0\x00\x02MICROSOFT NETWORKS 1.03\x00\x02MICROSOFT NETWORKS 3.0\x00\x02LANMAN1.0\x00\x02LM1.2X002\x00\x02DOS LANMAN2.1\x00\x02LANMAN2.1\x00\x02Samba\x00\x02NT LANMAN 1.0\x00\x02NT LM 0.12\x00\x02SMB 2.002\x00\x02SMB 2.???\x00',
)


def run_tests():
  for data in TLS_CLIENT_DATAS:
    analyze_tls_hello(data)
  for data in SMB_CLIENT_DATAS:
    analyze_smb_negotiate(data)


if __name__ == '__main__':
  run_tests()
